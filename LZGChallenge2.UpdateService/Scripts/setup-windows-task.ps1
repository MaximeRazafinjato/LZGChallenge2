# Script PowerShell pour configurer le service LZG Update en tant que t√¢che Windows
# Ex√©cuter en tant qu'administrateur

param(
    [Parameter(Mandatory=$true)]
    [string]$ServicePath,
    
    [Parameter(Mandatory=$false)]
    [int]$IntervalMinutes = 5,
    
    [Parameter(Mandatory=$false)]
    [string]$TaskName = "LZG Challenge Update Service"
)

Write-Host "=== Configuration du Service LZG Challenge Update ===" -ForegroundColor Green

# V√©rifier si le chemin existe
if (-not (Test-Path $ServicePath)) {
    Write-Error "Le chemin sp√©cifi√© n'existe pas: $ServicePath"
    exit 1
}

# V√©rifier si la t√¢che existe d√©j√†
$existingTask = Get-ScheduledTask -TaskName $TaskName -ErrorAction SilentlyContinue
if ($existingTask) {
    Write-Host "La t√¢che '$TaskName' existe d√©j√†. Suppression..." -ForegroundColor Yellow
    Unregister-ScheduledTask -TaskName $TaskName -Confirm:$false
}

try {
    # Cr√©er l'action de la t√¢che
    $dotnetPath = (Get-Command dotnet).Source
    $arguments = "`"$ServicePath\LZGChallenge2.UpdateService.dll`""
    
    $action = New-ScheduledTaskAction -Execute $dotnetPath -Argument $arguments -WorkingDirectory $ServicePath
    
    # Cr√©er le d√©clencheur (r√©p√©tition toutes les X minutes)
    $trigger = New-ScheduledTaskTrigger -Once -At (Get-Date) -RepetitionInterval (New-TimeSpan -Minutes $IntervalMinutes) -RepetitionDuration (New-TimeSpan -Days 365)
    
    # Configurer les param√®tres de la t√¢che
    $settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -RunOnlyIfNetworkAvailable
    
    # Cr√©er la t√¢che
    $task = New-ScheduledTask -Action $action -Trigger $trigger -Settings $settings -Description "Service de mise √† jour automatique pour LZG Challenge - League of Legends SoloQ Competition"
    
    # Enregistrer la t√¢che (s'ex√©cute sous le compte syst√®me)
    Register-ScheduledTask -TaskName $TaskName -InputObject $task -User "SYSTEM"
    
    Write-Host "‚úÖ T√¢che '$TaskName' cr√©√©e avec succ√®s!" -ForegroundColor Green
    Write-Host "üìÖ Intervalle: Toutes les $IntervalMinutes minutes" -ForegroundColor Cyan
    Write-Host "üìÇ Chemin: $ServicePath" -ForegroundColor Cyan
    Write-Host "üîß Commande: $dotnetPath $arguments" -ForegroundColor Cyan
    
    # D√©marrer la t√¢che imm√©diatement pour test
    Write-Host "`nüöÄ Test d'ex√©cution imm√©diate..." -ForegroundColor Yellow
    Start-ScheduledTask -TaskName $TaskName
    
    # Attendre un peu et v√©rifier le statut
    Start-Sleep -Seconds 3
    $taskInfo = Get-ScheduledTask -TaskName $TaskName
    $lastResult = (Get-ScheduledTaskInfo -TaskName $TaskName).LastTaskResult
    
    if ($lastResult -eq 0) {
        Write-Host "‚úÖ Test r√©ussi! Le service s'ex√©cute correctement." -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  R√©sultat du test: $lastResult (v√©rifiez les logs)" -ForegroundColor Yellow
    }
    
    Write-Host "`nüìã Commandes utiles:" -ForegroundColor Cyan
    Write-Host "   V√©rifier le statut: Get-ScheduledTask -TaskName '$TaskName'" -ForegroundColor Gray
    Write-Host "   Voir les ex√©cutions: Get-ScheduledTaskInfo -TaskName '$TaskName'" -ForegroundColor Gray
    Write-Host "   Ex√©cuter manuellement: Start-ScheduledTask -TaskName '$TaskName'" -ForegroundColor Gray
    Write-Host "   Supprimer la t√¢che: Unregister-ScheduledTask -TaskName '$TaskName'" -ForegroundColor Gray
    
} catch {
    Write-Error "Erreur lors de la cr√©ation de la t√¢che: $($_.Exception.Message)"
    exit 1
}

Write-Host "`n‚úÖ Configuration termin√©e!" -ForegroundColor Green